{"version":3,"sources":["img/face.png","img/branca.png","img/extra.png","img/hooka.png","img/os.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledModal","Modal","styled","ModalHeader","div","ModalCloseButton","button","ModalContent","AppContainer","Content","Image","img","Logo","App","React","useState","isModalOpen","setIsModalOpen","toggleModal","prev","isOpen","onBackgroundClick","onEscapeKeydown","onClick","setTimeout","style","backgroundColor","color","fontWeight","fontSize","padding","margin","width","display","justifyContent","src","logo","alt","marginTop","flexWrap","borderTop","borderBottom","branca","hooka","os","extra","maxWidth","url","playing","loop","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,8rECW3C,IAAMC,EAAcC,IAAMC,OAAT,KAUXC,EAAcD,UAAOE,IAAV,KAUXC,EAAmBH,UAAOI,OAAV,KAqBhBC,EAAeL,UAAOE,IAAV,KAQZI,EAAeN,UAAOE,IAAV,KAOZK,EAAUP,UAAOE,IAAV,KAOPM,EAAQR,UAAOS,IAAV,KAkBLC,EAAOV,UAAOS,IAAV,KAqGKE,MA5Ff,WAAgB,IAAD,EACyBC,IAAMC,UAAS,GADxC,mBACNC,EADM,KACOC,EADP,KAGPC,EAAc,kBAAMD,GAAe,SAACE,GAAD,OAAWA,MAOpD,OACE,kBAACX,EAAD,KACE,kBAAC,gBAAD,KACE,kBAACR,EAAD,CACEoB,OAAQJ,EACRK,kBAAmBH,EACnBI,gBAAiBJ,GAEjB,kBAACf,EAAD,KACE,kBAACE,EAAD,CAAkBkB,QAdP,WACnBN,GAAe,GACfO,YAAW,kBAAMP,GAAe,KAAO,QAY/B,MAEF,kBAACV,EAAD,KACE,kDACmB,6BACjB,6BACA,0BACEkB,MAAO,CACLC,gBAAiB,OACjBC,MAAO,QACPC,WAAY,OACZC,SAAU,OACVC,QAAS,YACTC,OAAQ,SAPZ,YAYA,6BACA,6BAhBF,2DAqBJ,kBAACtB,EAAD,KACE,yBACEgB,MAAO,CACLO,MAAO,OACPC,QAAS,OACTC,eAAgB,SAChBJ,QAAS,WAGX,kBAACpB,EAAD,CAAOyB,IAAKC,IAAMC,IAAI,UAExB,yBAAKZ,MAAO,CAAEa,UAAW,SACvB,yBACEb,MAAO,CACLQ,QAAS,OACTC,eAAgB,eAChBK,SAAU,OACVC,UAAW,iBACXC,aAAc,iBACdX,QAAS,WAGX,kBAAClB,EAAD,CAAMuB,IAAKO,MACX,kBAAC9B,EAAD,CAAMuB,IAAKQ,MACX,kBAAC/B,EAAD,CAAMuB,IAAKS,MACX,kBAAChC,EAAD,CAAMuB,IAAKU,QAIf,yBACEpB,MAAO,CACLqB,SAAU,MACVR,UAAW,SAGb,kBAAC,IAAD,CACES,IAAI,8CACJC,SAAS,EACTC,MAAM,EACNjB,MAAM,QACNkB,OAAO,eC5KDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed8292df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face.159e5d42.png\";","module.exports = __webpack_public_path__ + \"static/media/branca.c7094660.png\";","module.exports = __webpack_public_path__ + \"static/media/extra.64992bf5.png\";","module.exports = __webpack_public_path__ + \"static/media/hooka.7cb5ebe4.png\";","module.exports = __webpack_public_path__ + \"static/media/os.c0b28df4.png\";","import React from \"react\";\nimport logo from \"./img/face.png\";\nimport branca from \"./img/branca.png\";\nimport extra from \"./img/extra.png\";\nimport hooka from \"./img/hooka.png\";\nimport os from \"./img/os.png\";\n\nimport styled from \"styled-components\";\nimport Modal, { ModalProvider } from \"styled-react-modal\";\nimport ReactPlayer from \"react-player\";\n\nconst StyledModal = Modal.styled`\n  width: 20rem;\n  height: 20rem;\n  display: flex;\n  flex-direction: column;\n  background-color: lightgrey;\n  border-radius: 5px;\n  border: 2px solid black;\n`;\n\nconst ModalHeader = styled.div`\n  background-color: blue;\n  min-height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  border-radius: 3px 3px 0 0;\n  box-shadow: 0 3px black;\n`;\n\nconst ModalCloseButton = styled.button`\n  margin: 2px 2px 2px auto;\n  height: 30px;\n  width: 30px;\n  display: flex;\n  border: 1px solid black;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem 1rem;\n\n  text-decoration: none;\n  background: white;\n  color: black;\n  font-family: sans-serif;\n  font-size: 1rem;\n  cursor: pointer;\n  text-align: center;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n`;\n\nconst ModalContent = styled.div`\n  margin: 30px 10px;\n  line-height: 1.5em;\n  font-size: 20px;\n  display: flex;\n  text-align: center;\n`;\n\nconst AppContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: whitesmoke;\n  overflow: hidden;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 20px auto;\n`;\n\nconst Image = styled.img`\n  max-width: 300px;\n  max-height: 200px;\n  width: auto;\n  height: auto;\n\n  /* animation: App-logo-spin infinite 15s linear;\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  } */\n`;\n\nconst Logo = styled.img`\n  max-width: 100px;\n  max-height: 50px;\n  width: auto;\n  height: auto;\n\n  margin: 10px;\n`;\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n\n  const toggleModal = () => setIsModalOpen((prev) => !prev);\n\n  const onCloseModal = () => {\n    setIsModalOpen(false);\n    setTimeout(() => setIsModalOpen(true), 1500);\n  };\n\n  return (\n    <AppContainer>\n      <ModalProvider>\n        <StyledModal\n          isOpen={isModalOpen}\n          onBackgroundClick={toggleModal}\n          onEscapeKeydown={toggleModal}\n        >\n          <ModalHeader>\n            <ModalCloseButton onClick={onCloseModal}>X</ModalCloseButton>\n          </ModalHeader>\n          <ModalContent>\n            <span>\n              Bruk rabattkoden <br />\n              <br />\n              <code\n                style={{\n                  backgroundColor: \"blue\",\n                  color: \"white\",\n                  fontWeight: \"bold\",\n                  fontSize: \"24px\",\n                  padding: \"10px 10px\",\n                  margin: \"20px\",\n                }}\n              >\n                Reiten28\n              </code>\n              <br />\n              <br /> for 28% rabatt p√• alle produkter fra Oskar Sylte!\n            </span>\n          </ModalContent>\n        </StyledModal>\n\n        <Content>\n          <div\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              padding: \"20px 0\",\n            }}\n          >\n            <Image src={logo} alt=\"logo\" />\n          </div>\n          <div style={{ marginTop: \"30px\" }}>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-evenly\",\n                flexWrap: \"wrap\",\n                borderTop: \"1px solid grey\",\n                borderBottom: \"1px solid grey\",\n                padding: \"10px 0\",\n              }}\n            >\n              <Logo src={branca} />\n              <Logo src={hooka} />\n              <Logo src={os} />\n              <Logo src={extra} />\n            </div>\n          </div>\n\n          <div\n            style={{\n              maxWidth: \"90%\",\n              marginTop: \"50px\",\n            }}\n          >\n            <ReactPlayer\n              url=\"https://www.youtube.com/watch?v=gjad6ISwjZE\"\n              playing={true}\n              loop={true}\n              width=\"400px\"\n              height=\"300px\"\n            />\n          </div>\n        </Content>\n      </ModalProvider>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}